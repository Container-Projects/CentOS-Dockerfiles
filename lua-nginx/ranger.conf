# sometimes need this
user root root;

worker_processes  auto;
error_log logs/error.log;
worker_rlimit_nofile 65535;
events {
  use epoll;
  worker_connections 4096;
  # accept as many connections as possible, may flood worker connections if set too low -- for testing environment
  multi_accept on;
}

http {
  # cache informations about FDs, frequently accessed files
  # can boost performance, but you need to test those values
  open_file_cache max=200000 inactive=20s;
  open_file_cache_valid 30s;
  open_file_cache_min_uses 2;
  open_file_cache_errors on;

  # copies data between one FD and other from within the kernel
  # faster then read() + write()
  sendfile on;
  # send headers in one peace, its better then sending them one by one
  tcp_nopush on;
  # don't buffer data sent, good for small data bursts in real time
  tcp_nodelay on;

  # reduce the data that needs to be sent over network -- for testing environment
  gzip on;
  gzip_min_length 10240;
  gzip_proxied expired no-cache no-store private auth;
  gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/json application/xml;
  gzip_disable msie6;

  # allow the server to close connection on non responding client, this will free up memory
  reset_timedout_connection on;
  # request timed out -- default 60
  client_body_timeout 10;
  # if client stop responding, free up memory -- default 60
  send_timeout 2;
  # server will close connection after this time -- default 75
  keepalive_timeout 30;
  # number of requests client can make over keep-alive -- for testing environment
  keepalive_requests 100000;

  # how long to wait for the client to send a request header -- for testing environment
  client_header_timeout 10;
  server_tokens off;
  include mime.types;
  # if the request body size is more than the buffer size, then the entire (or partial)
  # request body is written into a temporary file
  client_body_buffer_size  128k;

  # headerbuffer size for the request header from client -- for testing environment
  client_header_buffer_size 3m;

  # maximum number and size of buffers for large headers to read from client request
  large_client_header_buffers 4 256k;

  # block list
  #allow white-list
  #deny all
  include ranger_install/http_block.conf;

  server {
    resolver 223.5.5.5;
    resolver_timeout 1s;
    listen 8080;
    location = / {
      proxy_pass $scheme://$host$request_uri;
      proxy_set_header Host $http_host;
      proxy_buffers 256 4k;
      proxy_max_temp_file_size 0;
      proxy_connect_timeout 30;
      proxy_cache_valid 200 302 1m;
      proxy_cache_valid 301 1h;
      proxy_cache_valid any 1m;
    }

    location = /hello {
      default_type text/html;
      content_by_lua '
        ngx.say("<p>hello, world</p>")
      ';
    }

    location = /dial {
      content_by_lua '
        local shell = require("resty.shell")
        local args = {
          socket = "unix:/tmp/shell.sock",
        }
        local status, out, err = shell.execute("uname -a", args)
        ngx.header.content_type = "text/plain"
        ngx.say(out)
      ';
    }

    location = /dns {
      content_by_lua_file ranger_install/lua_script/lookup.lua;
    }
  }
  server {
    listen                         3128;
    resolver                       223.5.5.5;
    # forward proxy for CONNECT request
    proxy_connect;
    proxy_connect_allow            443 563;
    proxy_connect_connect_timeout  10s;
    proxy_connect_read_timeout     10s;
    proxy_connect_send_timeout     10s;
    # forward proxy for non-CONNECT request
    location / {
      proxy_pass http://$host;
      proxy_set_header Host $host;
    }
  }
}
